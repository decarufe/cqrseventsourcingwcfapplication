//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestConsoleClient.CqrsService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemEntity", Namespace="http://schemas.datacontract.org/2004/07/Server.Contracts.Data")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TestConsoleClient.CqrsService.Executable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TestConsoleClient.CqrsService.Node))]
    public partial class SystemEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParentSystemNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentSystemName {
            get {
                return this.ParentSystemNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentSystemNameField, value) != true)) {
                    this.ParentSystemNameField = value;
                    this.RaisePropertyChanged("ParentSystemName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Executable", Namespace="http://schemas.datacontract.org/2004/07/Server.Contracts.Data")]
    [System.SerializableAttribute()]
    public partial class Executable : TestConsoleClient.CqrsService.SystemEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Node {
            get {
                return this.NodeField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeField, value) != true)) {
                    this.NodeField = value;
                    this.RaisePropertyChanged("Node");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Node", Namespace="http://schemas.datacontract.org/2004/07/Server.Contracts.Data")]
    [System.SerializableAttribute()]
    public partial class Node : TestConsoleClient.CqrsService.SystemEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ExecutablesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Executables {
            get {
                return this.ExecutablesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExecutablesField, value) != true)) {
                    this.ExecutablesField = value;
                    this.RaisePropertyChanged("Executables");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DomainModelDto", Namespace="http://schemas.datacontract.org/2004/07/Server.Contracts.Data")]
    [System.SerializableAttribute()]
    public partial class DomainModelDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DomainModelIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReadModelIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.Guid DomainModelId {
            get {
                return this.DomainModelIdField;
            }
            set {
                if ((this.DomainModelIdField.Equals(value) != true)) {
                    this.DomainModelIdField = value;
                    this.RaisePropertyChanged("DomainModelId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string ReadModelId {
            get {
                return this.ReadModelIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ReadModelIdField, value) != true)) {
                    this.ReadModelIdField = value;
                    this.RaisePropertyChanged("ReadModelId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Pong", Namespace="http://schemas.datacontract.org/2004/07/Server.Contracts.Data")]
    [System.SerializableAttribute()]
    public partial class Pong : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CqrsService.ICqrsService")]
    public interface ICqrsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/SetName", ReplyAction="http://tempuri.org/ICqrsService/SetNameResponse")]
        void SetName(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/AddSystem", ReplyAction="http://tempuri.org/ICqrsService/AddSystemResponse")]
        void AddSystem(System.Guid id, string name, string parentSystemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/RemoveSystem", ReplyAction="http://tempuri.org/ICqrsService/RemoveSystemResponse")]
        void RemoveSystem(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/AddNode", ReplyAction="http://tempuri.org/ICqrsService/AddNodeResponse")]
        void AddNode(System.Guid id, string name, string parentSystemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/RemoveNode", ReplyAction="http://tempuri.org/ICqrsService/RemoveNodeResponse")]
        void RemoveNode(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/AddExecutable", ReplyAction="http://tempuri.org/ICqrsService/AddExecutableResponse")]
        void AddExecutable(System.Guid id, string name, string parentSystemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/RemoveExecutable", ReplyAction="http://tempuri.org/ICqrsService/RemoveExecutableResponse")]
        void RemoveExecutable(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/AssignExecutableToNode", ReplyAction="http://tempuri.org/ICqrsService/AssignExecutableToNodeResponse")]
        void AssignExecutableToNode(System.Guid id, string executableName, string nodeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/CommitVersion", ReplyAction="http://tempuri.org/ICqrsService/CommitVersionResponse")]
        void CommitVersion(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/GetName", ReplyAction="http://tempuri.org/ICqrsService/GetNameResponse")]
        string GetName(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/GetSystems", ReplyAction="http://tempuri.org/ICqrsService/GetSystemsResponse")]
        TestConsoleClient.CqrsService.SystemEntity[] GetSystems(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/GetNodes", ReplyAction="http://tempuri.org/ICqrsService/GetNodesResponse")]
        TestConsoleClient.CqrsService.Node[] GetNodes(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/GetExecutables", ReplyAction="http://tempuri.org/ICqrsService/GetExecutablesResponse")]
        TestConsoleClient.CqrsService.Executable[] GetExecutables(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/GetList", ReplyAction="http://tempuri.org/ICqrsService/GetListResponse")]
        TestConsoleClient.CqrsService.DomainModelDto[] GetList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/ReloadFromEvents", ReplyAction="http://tempuri.org/ICqrsService/ReloadFromEventsResponse")]
        void ReloadFromEvents(System.Uri uri, System.DateTime lastEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/Ping", ReplyAction="http://tempuri.org/ICqrsService/PingResponse")]
        TestConsoleClient.CqrsService.Pong Ping(System.Uri sender);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICqrsServiceChannel : TestConsoleClient.CqrsService.ICqrsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CqrsServiceClient : System.ServiceModel.ClientBase<TestConsoleClient.CqrsService.ICqrsService>, TestConsoleClient.CqrsService.ICqrsService {
        
        public CqrsServiceClient() {
        }
        
        public CqrsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CqrsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CqrsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CqrsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SetName(System.Guid id, string name) {
            base.Channel.SetName(id, name);
        }
        
        public void AddSystem(System.Guid id, string name, string parentSystemName) {
            base.Channel.AddSystem(id, name, parentSystemName);
        }
        
        public void RemoveSystem(System.Guid id, string name) {
            base.Channel.RemoveSystem(id, name);
        }
        
        public void AddNode(System.Guid id, string name, string parentSystemName) {
            base.Channel.AddNode(id, name, parentSystemName);
        }
        
        public void RemoveNode(System.Guid id, string name) {
            base.Channel.RemoveNode(id, name);
        }
        
        public void AddExecutable(System.Guid id, string name, string parentSystemName) {
            base.Channel.AddExecutable(id, name, parentSystemName);
        }
        
        public void RemoveExecutable(System.Guid id, string name) {
            base.Channel.RemoveExecutable(id, name);
        }
        
        public void AssignExecutableToNode(System.Guid id, string executableName, string nodeName) {
            base.Channel.AssignExecutableToNode(id, executableName, nodeName);
        }
        
        public void CommitVersion(System.Guid id) {
            base.Channel.CommitVersion(id);
        }
        
        public string GetName(System.Guid id) {
            return base.Channel.GetName(id);
        }
        
        public TestConsoleClient.CqrsService.SystemEntity[] GetSystems(System.Guid id) {
            return base.Channel.GetSystems(id);
        }
        
        public TestConsoleClient.CqrsService.Node[] GetNodes(System.Guid id) {
            return base.Channel.GetNodes(id);
        }
        
        public TestConsoleClient.CqrsService.Executable[] GetExecutables(System.Guid id) {
            return base.Channel.GetExecutables(id);
        }
        
        public TestConsoleClient.CqrsService.DomainModelDto[] GetList() {
            return base.Channel.GetList();
        }
        
        public void ReloadFromEvents(System.Uri uri, System.DateTime lastEvent) {
            base.Channel.ReloadFromEvents(uri, lastEvent);
        }
        
        public TestConsoleClient.CqrsService.Pong Ping(System.Uri sender) {
            return base.Channel.Ping(sender);
        }
    }
}
