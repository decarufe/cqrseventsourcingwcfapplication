//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Server.ReadModel.Endpoint.CqrsServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemEntity", Namespace="http://schemas.datacontract.org/2004/07/Server.Contracts.Data")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Server.ReadModel.Endpoint.CqrsServiceReference.Executable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Server.ReadModel.Endpoint.CqrsServiceReference.Node))]
    public partial class SystemEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParentSystemNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentSystemName {
            get {
                return this.ParentSystemNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentSystemNameField, value) != true)) {
                    this.ParentSystemNameField = value;
                    this.RaisePropertyChanged("ParentSystemName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Executable", Namespace="http://schemas.datacontract.org/2004/07/Server.Contracts.Data")]
    [System.SerializableAttribute()]
    public partial class Executable : Server.ReadModel.Endpoint.CqrsServiceReference.SystemEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Node {
            get {
                return this.NodeField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeField, value) != true)) {
                    this.NodeField = value;
                    this.RaisePropertyChanged("Node");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Node", Namespace="http://schemas.datacontract.org/2004/07/Server.Contracts.Data")]
    [System.SerializableAttribute()]
    public partial class Node : Server.ReadModel.Endpoint.CqrsServiceReference.SystemEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ExecutablesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Executables {
            get {
                return this.ExecutablesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExecutablesField, value) != true)) {
                    this.ExecutablesField = value;
                    this.RaisePropertyChanged("Executables");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DomainModelDto", Namespace="http://schemas.datacontract.org/2004/07/Server.Contracts.Data")]
    [System.SerializableAttribute()]
    public partial class DomainModelDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DomainModelIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReadModelIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.Guid DomainModelId {
            get {
                return this.DomainModelIdField;
            }
            set {
                if ((this.DomainModelIdField.Equals(value) != true)) {
                    this.DomainModelIdField = value;
                    this.RaisePropertyChanged("DomainModelId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string ReadModelId {
            get {
                return this.ReadModelIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ReadModelIdField, value) != true)) {
                    this.ReadModelIdField = value;
                    this.RaisePropertyChanged("ReadModelId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Pong", Namespace="http://schemas.datacontract.org/2004/07/Server.Contracts.Data")]
    [System.SerializableAttribute()]
    public partial class Pong : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CqrsServiceReference.ICqrsService")]
    public interface ICqrsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/SetName", ReplyAction="http://tempuri.org/ICqrsService/SetNameResponse")]
        void SetName(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/SetName", ReplyAction="http://tempuri.org/ICqrsService/SetNameResponse")]
        System.IAsyncResult BeginSetName(System.Guid id, string name, System.AsyncCallback callback, object asyncState);
        
        void EndSetName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/AddSystem", ReplyAction="http://tempuri.org/ICqrsService/AddSystemResponse")]
        void AddSystem(System.Guid id, string name, string parentSystemName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/AddSystem", ReplyAction="http://tempuri.org/ICqrsService/AddSystemResponse")]
        System.IAsyncResult BeginAddSystem(System.Guid id, string name, string parentSystemName, System.AsyncCallback callback, object asyncState);
        
        void EndAddSystem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/RemoveSystem", ReplyAction="http://tempuri.org/ICqrsService/RemoveSystemResponse")]
        void RemoveSystem(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/RemoveSystem", ReplyAction="http://tempuri.org/ICqrsService/RemoveSystemResponse")]
        System.IAsyncResult BeginRemoveSystem(System.Guid id, string name, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveSystem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/AddNode", ReplyAction="http://tempuri.org/ICqrsService/AddNodeResponse")]
        void AddNode(System.Guid id, string name, string parentSystemName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/AddNode", ReplyAction="http://tempuri.org/ICqrsService/AddNodeResponse")]
        System.IAsyncResult BeginAddNode(System.Guid id, string name, string parentSystemName, System.AsyncCallback callback, object asyncState);
        
        void EndAddNode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/RemoveNode", ReplyAction="http://tempuri.org/ICqrsService/RemoveNodeResponse")]
        void RemoveNode(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/RemoveNode", ReplyAction="http://tempuri.org/ICqrsService/RemoveNodeResponse")]
        System.IAsyncResult BeginRemoveNode(System.Guid id, string name, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveNode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/AddExecutable", ReplyAction="http://tempuri.org/ICqrsService/AddExecutableResponse")]
        void AddExecutable(System.Guid id, string name, string parentSystemName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/AddExecutable", ReplyAction="http://tempuri.org/ICqrsService/AddExecutableResponse")]
        System.IAsyncResult BeginAddExecutable(System.Guid id, string name, string parentSystemName, System.AsyncCallback callback, object asyncState);
        
        void EndAddExecutable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/RemoveExecutable", ReplyAction="http://tempuri.org/ICqrsService/RemoveExecutableResponse")]
        void RemoveExecutable(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/RemoveExecutable", ReplyAction="http://tempuri.org/ICqrsService/RemoveExecutableResponse")]
        System.IAsyncResult BeginRemoveExecutable(System.Guid id, string name, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveExecutable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/AssignExecutableToNode", ReplyAction="http://tempuri.org/ICqrsService/AssignExecutableToNodeResponse")]
        void AssignExecutableToNode(System.Guid id, string executableName, string nodeName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/AssignExecutableToNode", ReplyAction="http://tempuri.org/ICqrsService/AssignExecutableToNodeResponse")]
        System.IAsyncResult BeginAssignExecutableToNode(System.Guid id, string executableName, string nodeName, System.AsyncCallback callback, object asyncState);
        
        void EndAssignExecutableToNode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/CommitVersion", ReplyAction="http://tempuri.org/ICqrsService/CommitVersionResponse")]
        void CommitVersion(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/CommitVersion", ReplyAction="http://tempuri.org/ICqrsService/CommitVersionResponse")]
        System.IAsyncResult BeginCommitVersion(System.Guid id, System.AsyncCallback callback, object asyncState);
        
        void EndCommitVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/GetName", ReplyAction="http://tempuri.org/ICqrsService/GetNameResponse")]
        string GetName(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/GetName", ReplyAction="http://tempuri.org/ICqrsService/GetNameResponse")]
        System.IAsyncResult BeginGetName(System.Guid id, System.AsyncCallback callback, object asyncState);
        
        string EndGetName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/GetSystems", ReplyAction="http://tempuri.org/ICqrsService/GetSystemsResponse")]
        Server.ReadModel.Endpoint.CqrsServiceReference.SystemEntity[] GetSystems(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/GetSystems", ReplyAction="http://tempuri.org/ICqrsService/GetSystemsResponse")]
        System.IAsyncResult BeginGetSystems(System.Guid id, System.AsyncCallback callback, object asyncState);
        
        Server.ReadModel.Endpoint.CqrsServiceReference.SystemEntity[] EndGetSystems(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/GetNodes", ReplyAction="http://tempuri.org/ICqrsService/GetNodesResponse")]
        Server.ReadModel.Endpoint.CqrsServiceReference.Node[] GetNodes(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/GetNodes", ReplyAction="http://tempuri.org/ICqrsService/GetNodesResponse")]
        System.IAsyncResult BeginGetNodes(System.Guid id, System.AsyncCallback callback, object asyncState);
        
        Server.ReadModel.Endpoint.CqrsServiceReference.Node[] EndGetNodes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/GetExecutables", ReplyAction="http://tempuri.org/ICqrsService/GetExecutablesResponse")]
        Server.ReadModel.Endpoint.CqrsServiceReference.Executable[] GetExecutables(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/GetExecutables", ReplyAction="http://tempuri.org/ICqrsService/GetExecutablesResponse")]
        System.IAsyncResult BeginGetExecutables(System.Guid id, System.AsyncCallback callback, object asyncState);
        
        Server.ReadModel.Endpoint.CqrsServiceReference.Executable[] EndGetExecutables(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/GetList", ReplyAction="http://tempuri.org/ICqrsService/GetListResponse")]
        Server.ReadModel.Endpoint.CqrsServiceReference.DomainModelDto[] GetList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/GetList", ReplyAction="http://tempuri.org/ICqrsService/GetListResponse")]
        System.IAsyncResult BeginGetList(System.AsyncCallback callback, object asyncState);
        
        Server.ReadModel.Endpoint.CqrsServiceReference.DomainModelDto[] EndGetList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/GetPublishedList", ReplyAction="http://tempuri.org/ICqrsService/GetPublishedListResponse")]
        Server.ReadModel.Endpoint.CqrsServiceReference.DomainModelDto[] GetPublishedList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/GetPublishedList", ReplyAction="http://tempuri.org/ICqrsService/GetPublishedListResponse")]
        System.IAsyncResult BeginGetPublishedList(System.AsyncCallback callback, object asyncState);
        
        Server.ReadModel.Endpoint.CqrsServiceReference.DomainModelDto[] EndGetPublishedList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/ReloadFromEvents", ReplyAction="http://tempuri.org/ICqrsService/ReloadFromEventsResponse")]
        void ReloadFromEvents(System.Uri uri, System.DateTime lastEvent);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/ReloadFromEvents", ReplyAction="http://tempuri.org/ICqrsService/ReloadFromEventsResponse")]
        System.IAsyncResult BeginReloadFromEvents(System.Uri uri, System.DateTime lastEvent, System.AsyncCallback callback, object asyncState);
        
        void EndReloadFromEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICqrsService/Ping", ReplyAction="http://tempuri.org/ICqrsService/PingResponse")]
        Server.ReadModel.Endpoint.CqrsServiceReference.Pong Ping(System.Uri sender);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICqrsService/Ping", ReplyAction="http://tempuri.org/ICqrsService/PingResponse")]
        System.IAsyncResult BeginPing(System.Uri sender, System.AsyncCallback callback, object asyncState);
        
        Server.ReadModel.Endpoint.CqrsServiceReference.Pong EndPing(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICqrsServiceChannel : Server.ReadModel.Endpoint.CqrsServiceReference.ICqrsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSystemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSystemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Server.ReadModel.Endpoint.CqrsServiceReference.SystemEntity[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Server.ReadModel.Endpoint.CqrsServiceReference.SystemEntity[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Server.ReadModel.Endpoint.CqrsServiceReference.Node[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Server.ReadModel.Endpoint.CqrsServiceReference.Node[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetExecutablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetExecutablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Server.ReadModel.Endpoint.CqrsServiceReference.Executable[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Server.ReadModel.Endpoint.CqrsServiceReference.Executable[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Server.ReadModel.Endpoint.CqrsServiceReference.DomainModelDto[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Server.ReadModel.Endpoint.CqrsServiceReference.DomainModelDto[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPublishedListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPublishedListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Server.ReadModel.Endpoint.CqrsServiceReference.DomainModelDto[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Server.ReadModel.Endpoint.CqrsServiceReference.DomainModelDto[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Server.ReadModel.Endpoint.CqrsServiceReference.Pong Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Server.ReadModel.Endpoint.CqrsServiceReference.Pong)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CqrsServiceClient : System.ServiceModel.ClientBase<Server.ReadModel.Endpoint.CqrsServiceReference.ICqrsService>, Server.ReadModel.Endpoint.CqrsServiceReference.ICqrsService {
        
        private BeginOperationDelegate onBeginSetNameDelegate;
        
        private EndOperationDelegate onEndSetNameDelegate;
        
        private System.Threading.SendOrPostCallback onSetNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddSystemDelegate;
        
        private EndOperationDelegate onEndAddSystemDelegate;
        
        private System.Threading.SendOrPostCallback onAddSystemCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveSystemDelegate;
        
        private EndOperationDelegate onEndRemoveSystemDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveSystemCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddNodeDelegate;
        
        private EndOperationDelegate onEndAddNodeDelegate;
        
        private System.Threading.SendOrPostCallback onAddNodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveNodeDelegate;
        
        private EndOperationDelegate onEndRemoveNodeDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveNodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddExecutableDelegate;
        
        private EndOperationDelegate onEndAddExecutableDelegate;
        
        private System.Threading.SendOrPostCallback onAddExecutableCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveExecutableDelegate;
        
        private EndOperationDelegate onEndRemoveExecutableDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveExecutableCompletedDelegate;
        
        private BeginOperationDelegate onBeginAssignExecutableToNodeDelegate;
        
        private EndOperationDelegate onEndAssignExecutableToNodeDelegate;
        
        private System.Threading.SendOrPostCallback onAssignExecutableToNodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginCommitVersionDelegate;
        
        private EndOperationDelegate onEndCommitVersionDelegate;
        
        private System.Threading.SendOrPostCallback onCommitVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNameDelegate;
        
        private EndOperationDelegate onEndGetNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSystemsDelegate;
        
        private EndOperationDelegate onEndGetSystemsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSystemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNodesDelegate;
        
        private EndOperationDelegate onEndGetNodesDelegate;
        
        private System.Threading.SendOrPostCallback onGetNodesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetExecutablesDelegate;
        
        private EndOperationDelegate onEndGetExecutablesDelegate;
        
        private System.Threading.SendOrPostCallback onGetExecutablesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetListDelegate;
        
        private EndOperationDelegate onEndGetListDelegate;
        
        private System.Threading.SendOrPostCallback onGetListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPublishedListDelegate;
        
        private EndOperationDelegate onEndGetPublishedListDelegate;
        
        private System.Threading.SendOrPostCallback onGetPublishedListCompletedDelegate;
        
        private BeginOperationDelegate onBeginReloadFromEventsDelegate;
        
        private EndOperationDelegate onEndReloadFromEventsDelegate;
        
        private System.Threading.SendOrPostCallback onReloadFromEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginPingDelegate;
        
        private EndOperationDelegate onEndPingDelegate;
        
        private System.Threading.SendOrPostCallback onPingCompletedDelegate;
        
        public CqrsServiceClient() {
        }
        
        public CqrsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CqrsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CqrsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CqrsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetNameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddSystemCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveSystemCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddNodeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveNodeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddExecutableCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveExecutableCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AssignExecutableToNodeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CommitVersionCompleted;
        
        public event System.EventHandler<GetNameCompletedEventArgs> GetNameCompleted;
        
        public event System.EventHandler<GetSystemsCompletedEventArgs> GetSystemsCompleted;
        
        public event System.EventHandler<GetNodesCompletedEventArgs> GetNodesCompleted;
        
        public event System.EventHandler<GetExecutablesCompletedEventArgs> GetExecutablesCompleted;
        
        public event System.EventHandler<GetListCompletedEventArgs> GetListCompleted;
        
        public event System.EventHandler<GetPublishedListCompletedEventArgs> GetPublishedListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReloadFromEventsCompleted;
        
        public event System.EventHandler<PingCompletedEventArgs> PingCompleted;
        
        public void SetName(System.Guid id, string name) {
            base.Channel.SetName(id, name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetName(System.Guid id, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetName(id, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetName(System.IAsyncResult result) {
            base.Channel.EndSetName(result);
        }
        
        private System.IAsyncResult OnBeginSetName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            return this.BeginSetName(id, name, callback, asyncState);
        }
        
        private object[] OnEndSetName(System.IAsyncResult result) {
            this.EndSetName(result);
            return null;
        }
        
        private void OnSetNameCompleted(object state) {
            if ((this.SetNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetNameAsync(System.Guid id, string name) {
            this.SetNameAsync(id, name, null);
        }
        
        public void SetNameAsync(System.Guid id, string name, object userState) {
            if ((this.onBeginSetNameDelegate == null)) {
                this.onBeginSetNameDelegate = new BeginOperationDelegate(this.OnBeginSetName);
            }
            if ((this.onEndSetNameDelegate == null)) {
                this.onEndSetNameDelegate = new EndOperationDelegate(this.OnEndSetName);
            }
            if ((this.onSetNameCompletedDelegate == null)) {
                this.onSetNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetNameCompleted);
            }
            base.InvokeAsync(this.onBeginSetNameDelegate, new object[] {
                        id,
                        name}, this.onEndSetNameDelegate, this.onSetNameCompletedDelegate, userState);
        }
        
        public void AddSystem(System.Guid id, string name, string parentSystemName) {
            base.Channel.AddSystem(id, name, parentSystemName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddSystem(System.Guid id, string name, string parentSystemName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddSystem(id, name, parentSystemName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddSystem(System.IAsyncResult result) {
            base.Channel.EndAddSystem(result);
        }
        
        private System.IAsyncResult OnBeginAddSystem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            string parentSystemName = ((string)(inValues[2]));
            return this.BeginAddSystem(id, name, parentSystemName, callback, asyncState);
        }
        
        private object[] OnEndAddSystem(System.IAsyncResult result) {
            this.EndAddSystem(result);
            return null;
        }
        
        private void OnAddSystemCompleted(object state) {
            if ((this.AddSystemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddSystemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddSystemAsync(System.Guid id, string name, string parentSystemName) {
            this.AddSystemAsync(id, name, parentSystemName, null);
        }
        
        public void AddSystemAsync(System.Guid id, string name, string parentSystemName, object userState) {
            if ((this.onBeginAddSystemDelegate == null)) {
                this.onBeginAddSystemDelegate = new BeginOperationDelegate(this.OnBeginAddSystem);
            }
            if ((this.onEndAddSystemDelegate == null)) {
                this.onEndAddSystemDelegate = new EndOperationDelegate(this.OnEndAddSystem);
            }
            if ((this.onAddSystemCompletedDelegate == null)) {
                this.onAddSystemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddSystemCompleted);
            }
            base.InvokeAsync(this.onBeginAddSystemDelegate, new object[] {
                        id,
                        name,
                        parentSystemName}, this.onEndAddSystemDelegate, this.onAddSystemCompletedDelegate, userState);
        }
        
        public void RemoveSystem(System.Guid id, string name) {
            base.Channel.RemoveSystem(id, name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveSystem(System.Guid id, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveSystem(id, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRemoveSystem(System.IAsyncResult result) {
            base.Channel.EndRemoveSystem(result);
        }
        
        private System.IAsyncResult OnBeginRemoveSystem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            return this.BeginRemoveSystem(id, name, callback, asyncState);
        }
        
        private object[] OnEndRemoveSystem(System.IAsyncResult result) {
            this.EndRemoveSystem(result);
            return null;
        }
        
        private void OnRemoveSystemCompleted(object state) {
            if ((this.RemoveSystemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveSystemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveSystemAsync(System.Guid id, string name) {
            this.RemoveSystemAsync(id, name, null);
        }
        
        public void RemoveSystemAsync(System.Guid id, string name, object userState) {
            if ((this.onBeginRemoveSystemDelegate == null)) {
                this.onBeginRemoveSystemDelegate = new BeginOperationDelegate(this.OnBeginRemoveSystem);
            }
            if ((this.onEndRemoveSystemDelegate == null)) {
                this.onEndRemoveSystemDelegate = new EndOperationDelegate(this.OnEndRemoveSystem);
            }
            if ((this.onRemoveSystemCompletedDelegate == null)) {
                this.onRemoveSystemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveSystemCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveSystemDelegate, new object[] {
                        id,
                        name}, this.onEndRemoveSystemDelegate, this.onRemoveSystemCompletedDelegate, userState);
        }
        
        public void AddNode(System.Guid id, string name, string parentSystemName) {
            base.Channel.AddNode(id, name, parentSystemName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddNode(System.Guid id, string name, string parentSystemName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddNode(id, name, parentSystemName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddNode(System.IAsyncResult result) {
            base.Channel.EndAddNode(result);
        }
        
        private System.IAsyncResult OnBeginAddNode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            string parentSystemName = ((string)(inValues[2]));
            return this.BeginAddNode(id, name, parentSystemName, callback, asyncState);
        }
        
        private object[] OnEndAddNode(System.IAsyncResult result) {
            this.EndAddNode(result);
            return null;
        }
        
        private void OnAddNodeCompleted(object state) {
            if ((this.AddNodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddNodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddNodeAsync(System.Guid id, string name, string parentSystemName) {
            this.AddNodeAsync(id, name, parentSystemName, null);
        }
        
        public void AddNodeAsync(System.Guid id, string name, string parentSystemName, object userState) {
            if ((this.onBeginAddNodeDelegate == null)) {
                this.onBeginAddNodeDelegate = new BeginOperationDelegate(this.OnBeginAddNode);
            }
            if ((this.onEndAddNodeDelegate == null)) {
                this.onEndAddNodeDelegate = new EndOperationDelegate(this.OnEndAddNode);
            }
            if ((this.onAddNodeCompletedDelegate == null)) {
                this.onAddNodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddNodeCompleted);
            }
            base.InvokeAsync(this.onBeginAddNodeDelegate, new object[] {
                        id,
                        name,
                        parentSystemName}, this.onEndAddNodeDelegate, this.onAddNodeCompletedDelegate, userState);
        }
        
        public void RemoveNode(System.Guid id, string name) {
            base.Channel.RemoveNode(id, name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveNode(System.Guid id, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveNode(id, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRemoveNode(System.IAsyncResult result) {
            base.Channel.EndRemoveNode(result);
        }
        
        private System.IAsyncResult OnBeginRemoveNode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            return this.BeginRemoveNode(id, name, callback, asyncState);
        }
        
        private object[] OnEndRemoveNode(System.IAsyncResult result) {
            this.EndRemoveNode(result);
            return null;
        }
        
        private void OnRemoveNodeCompleted(object state) {
            if ((this.RemoveNodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveNodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveNodeAsync(System.Guid id, string name) {
            this.RemoveNodeAsync(id, name, null);
        }
        
        public void RemoveNodeAsync(System.Guid id, string name, object userState) {
            if ((this.onBeginRemoveNodeDelegate == null)) {
                this.onBeginRemoveNodeDelegate = new BeginOperationDelegate(this.OnBeginRemoveNode);
            }
            if ((this.onEndRemoveNodeDelegate == null)) {
                this.onEndRemoveNodeDelegate = new EndOperationDelegate(this.OnEndRemoveNode);
            }
            if ((this.onRemoveNodeCompletedDelegate == null)) {
                this.onRemoveNodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveNodeCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveNodeDelegate, new object[] {
                        id,
                        name}, this.onEndRemoveNodeDelegate, this.onRemoveNodeCompletedDelegate, userState);
        }
        
        public void AddExecutable(System.Guid id, string name, string parentSystemName) {
            base.Channel.AddExecutable(id, name, parentSystemName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddExecutable(System.Guid id, string name, string parentSystemName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddExecutable(id, name, parentSystemName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddExecutable(System.IAsyncResult result) {
            base.Channel.EndAddExecutable(result);
        }
        
        private System.IAsyncResult OnBeginAddExecutable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            string parentSystemName = ((string)(inValues[2]));
            return this.BeginAddExecutable(id, name, parentSystemName, callback, asyncState);
        }
        
        private object[] OnEndAddExecutable(System.IAsyncResult result) {
            this.EndAddExecutable(result);
            return null;
        }
        
        private void OnAddExecutableCompleted(object state) {
            if ((this.AddExecutableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddExecutableCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddExecutableAsync(System.Guid id, string name, string parentSystemName) {
            this.AddExecutableAsync(id, name, parentSystemName, null);
        }
        
        public void AddExecutableAsync(System.Guid id, string name, string parentSystemName, object userState) {
            if ((this.onBeginAddExecutableDelegate == null)) {
                this.onBeginAddExecutableDelegate = new BeginOperationDelegate(this.OnBeginAddExecutable);
            }
            if ((this.onEndAddExecutableDelegate == null)) {
                this.onEndAddExecutableDelegate = new EndOperationDelegate(this.OnEndAddExecutable);
            }
            if ((this.onAddExecutableCompletedDelegate == null)) {
                this.onAddExecutableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddExecutableCompleted);
            }
            base.InvokeAsync(this.onBeginAddExecutableDelegate, new object[] {
                        id,
                        name,
                        parentSystemName}, this.onEndAddExecutableDelegate, this.onAddExecutableCompletedDelegate, userState);
        }
        
        public void RemoveExecutable(System.Guid id, string name) {
            base.Channel.RemoveExecutable(id, name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveExecutable(System.Guid id, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveExecutable(id, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRemoveExecutable(System.IAsyncResult result) {
            base.Channel.EndRemoveExecutable(result);
        }
        
        private System.IAsyncResult OnBeginRemoveExecutable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            return this.BeginRemoveExecutable(id, name, callback, asyncState);
        }
        
        private object[] OnEndRemoveExecutable(System.IAsyncResult result) {
            this.EndRemoveExecutable(result);
            return null;
        }
        
        private void OnRemoveExecutableCompleted(object state) {
            if ((this.RemoveExecutableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveExecutableCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveExecutableAsync(System.Guid id, string name) {
            this.RemoveExecutableAsync(id, name, null);
        }
        
        public void RemoveExecutableAsync(System.Guid id, string name, object userState) {
            if ((this.onBeginRemoveExecutableDelegate == null)) {
                this.onBeginRemoveExecutableDelegate = new BeginOperationDelegate(this.OnBeginRemoveExecutable);
            }
            if ((this.onEndRemoveExecutableDelegate == null)) {
                this.onEndRemoveExecutableDelegate = new EndOperationDelegate(this.OnEndRemoveExecutable);
            }
            if ((this.onRemoveExecutableCompletedDelegate == null)) {
                this.onRemoveExecutableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveExecutableCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveExecutableDelegate, new object[] {
                        id,
                        name}, this.onEndRemoveExecutableDelegate, this.onRemoveExecutableCompletedDelegate, userState);
        }
        
        public void AssignExecutableToNode(System.Guid id, string executableName, string nodeName) {
            base.Channel.AssignExecutableToNode(id, executableName, nodeName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAssignExecutableToNode(System.Guid id, string executableName, string nodeName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAssignExecutableToNode(id, executableName, nodeName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAssignExecutableToNode(System.IAsyncResult result) {
            base.Channel.EndAssignExecutableToNode(result);
        }
        
        private System.IAsyncResult OnBeginAssignExecutableToNode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            string executableName = ((string)(inValues[1]));
            string nodeName = ((string)(inValues[2]));
            return this.BeginAssignExecutableToNode(id, executableName, nodeName, callback, asyncState);
        }
        
        private object[] OnEndAssignExecutableToNode(System.IAsyncResult result) {
            this.EndAssignExecutableToNode(result);
            return null;
        }
        
        private void OnAssignExecutableToNodeCompleted(object state) {
            if ((this.AssignExecutableToNodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AssignExecutableToNodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AssignExecutableToNodeAsync(System.Guid id, string executableName, string nodeName) {
            this.AssignExecutableToNodeAsync(id, executableName, nodeName, null);
        }
        
        public void AssignExecutableToNodeAsync(System.Guid id, string executableName, string nodeName, object userState) {
            if ((this.onBeginAssignExecutableToNodeDelegate == null)) {
                this.onBeginAssignExecutableToNodeDelegate = new BeginOperationDelegate(this.OnBeginAssignExecutableToNode);
            }
            if ((this.onEndAssignExecutableToNodeDelegate == null)) {
                this.onEndAssignExecutableToNodeDelegate = new EndOperationDelegate(this.OnEndAssignExecutableToNode);
            }
            if ((this.onAssignExecutableToNodeCompletedDelegate == null)) {
                this.onAssignExecutableToNodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssignExecutableToNodeCompleted);
            }
            base.InvokeAsync(this.onBeginAssignExecutableToNodeDelegate, new object[] {
                        id,
                        executableName,
                        nodeName}, this.onEndAssignExecutableToNodeDelegate, this.onAssignExecutableToNodeCompletedDelegate, userState);
        }
        
        public void CommitVersion(System.Guid id) {
            base.Channel.CommitVersion(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCommitVersion(System.Guid id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCommitVersion(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCommitVersion(System.IAsyncResult result) {
            base.Channel.EndCommitVersion(result);
        }
        
        private System.IAsyncResult OnBeginCommitVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            return this.BeginCommitVersion(id, callback, asyncState);
        }
        
        private object[] OnEndCommitVersion(System.IAsyncResult result) {
            this.EndCommitVersion(result);
            return null;
        }
        
        private void OnCommitVersionCompleted(object state) {
            if ((this.CommitVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CommitVersionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CommitVersionAsync(System.Guid id) {
            this.CommitVersionAsync(id, null);
        }
        
        public void CommitVersionAsync(System.Guid id, object userState) {
            if ((this.onBeginCommitVersionDelegate == null)) {
                this.onBeginCommitVersionDelegate = new BeginOperationDelegate(this.OnBeginCommitVersion);
            }
            if ((this.onEndCommitVersionDelegate == null)) {
                this.onEndCommitVersionDelegate = new EndOperationDelegate(this.OnEndCommitVersion);
            }
            if ((this.onCommitVersionCompletedDelegate == null)) {
                this.onCommitVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCommitVersionCompleted);
            }
            base.InvokeAsync(this.onBeginCommitVersionDelegate, new object[] {
                        id}, this.onEndCommitVersionDelegate, this.onCommitVersionCompletedDelegate, userState);
        }
        
        public string GetName(System.Guid id) {
            return base.Channel.GetName(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetName(System.Guid id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetName(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetName(System.IAsyncResult result) {
            return base.Channel.EndGetName(result);
        }
        
        private System.IAsyncResult OnBeginGetName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            return this.BeginGetName(id, callback, asyncState);
        }
        
        private object[] OnEndGetName(System.IAsyncResult result) {
            string retVal = this.EndGetName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNameCompleted(object state) {
            if ((this.GetNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNameCompleted(this, new GetNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNameAsync(System.Guid id) {
            this.GetNameAsync(id, null);
        }
        
        public void GetNameAsync(System.Guid id, object userState) {
            if ((this.onBeginGetNameDelegate == null)) {
                this.onBeginGetNameDelegate = new BeginOperationDelegate(this.OnBeginGetName);
            }
            if ((this.onEndGetNameDelegate == null)) {
                this.onEndGetNameDelegate = new EndOperationDelegate(this.OnEndGetName);
            }
            if ((this.onGetNameCompletedDelegate == null)) {
                this.onGetNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetNameDelegate, new object[] {
                        id}, this.onEndGetNameDelegate, this.onGetNameCompletedDelegate, userState);
        }
        
        public Server.ReadModel.Endpoint.CqrsServiceReference.SystemEntity[] GetSystems(System.Guid id) {
            return base.Channel.GetSystems(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSystems(System.Guid id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSystems(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Server.ReadModel.Endpoint.CqrsServiceReference.SystemEntity[] EndGetSystems(System.IAsyncResult result) {
            return base.Channel.EndGetSystems(result);
        }
        
        private System.IAsyncResult OnBeginGetSystems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            return this.BeginGetSystems(id, callback, asyncState);
        }
        
        private object[] OnEndGetSystems(System.IAsyncResult result) {
            Server.ReadModel.Endpoint.CqrsServiceReference.SystemEntity[] retVal = this.EndGetSystems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSystemsCompleted(object state) {
            if ((this.GetSystemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSystemsCompleted(this, new GetSystemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSystemsAsync(System.Guid id) {
            this.GetSystemsAsync(id, null);
        }
        
        public void GetSystemsAsync(System.Guid id, object userState) {
            if ((this.onBeginGetSystemsDelegate == null)) {
                this.onBeginGetSystemsDelegate = new BeginOperationDelegate(this.OnBeginGetSystems);
            }
            if ((this.onEndGetSystemsDelegate == null)) {
                this.onEndGetSystemsDelegate = new EndOperationDelegate(this.OnEndGetSystems);
            }
            if ((this.onGetSystemsCompletedDelegate == null)) {
                this.onGetSystemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSystemsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSystemsDelegate, new object[] {
                        id}, this.onEndGetSystemsDelegate, this.onGetSystemsCompletedDelegate, userState);
        }
        
        public Server.ReadModel.Endpoint.CqrsServiceReference.Node[] GetNodes(System.Guid id) {
            return base.Channel.GetNodes(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetNodes(System.Guid id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNodes(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Server.ReadModel.Endpoint.CqrsServiceReference.Node[] EndGetNodes(System.IAsyncResult result) {
            return base.Channel.EndGetNodes(result);
        }
        
        private System.IAsyncResult OnBeginGetNodes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            return this.BeginGetNodes(id, callback, asyncState);
        }
        
        private object[] OnEndGetNodes(System.IAsyncResult result) {
            Server.ReadModel.Endpoint.CqrsServiceReference.Node[] retVal = this.EndGetNodes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNodesCompleted(object state) {
            if ((this.GetNodesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNodesCompleted(this, new GetNodesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNodesAsync(System.Guid id) {
            this.GetNodesAsync(id, null);
        }
        
        public void GetNodesAsync(System.Guid id, object userState) {
            if ((this.onBeginGetNodesDelegate == null)) {
                this.onBeginGetNodesDelegate = new BeginOperationDelegate(this.OnBeginGetNodes);
            }
            if ((this.onEndGetNodesDelegate == null)) {
                this.onEndGetNodesDelegate = new EndOperationDelegate(this.OnEndGetNodes);
            }
            if ((this.onGetNodesCompletedDelegate == null)) {
                this.onGetNodesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNodesCompleted);
            }
            base.InvokeAsync(this.onBeginGetNodesDelegate, new object[] {
                        id}, this.onEndGetNodesDelegate, this.onGetNodesCompletedDelegate, userState);
        }
        
        public Server.ReadModel.Endpoint.CqrsServiceReference.Executable[] GetExecutables(System.Guid id) {
            return base.Channel.GetExecutables(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetExecutables(System.Guid id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetExecutables(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Server.ReadModel.Endpoint.CqrsServiceReference.Executable[] EndGetExecutables(System.IAsyncResult result) {
            return base.Channel.EndGetExecutables(result);
        }
        
        private System.IAsyncResult OnBeginGetExecutables(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            return this.BeginGetExecutables(id, callback, asyncState);
        }
        
        private object[] OnEndGetExecutables(System.IAsyncResult result) {
            Server.ReadModel.Endpoint.CqrsServiceReference.Executable[] retVal = this.EndGetExecutables(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetExecutablesCompleted(object state) {
            if ((this.GetExecutablesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExecutablesCompleted(this, new GetExecutablesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExecutablesAsync(System.Guid id) {
            this.GetExecutablesAsync(id, null);
        }
        
        public void GetExecutablesAsync(System.Guid id, object userState) {
            if ((this.onBeginGetExecutablesDelegate == null)) {
                this.onBeginGetExecutablesDelegate = new BeginOperationDelegate(this.OnBeginGetExecutables);
            }
            if ((this.onEndGetExecutablesDelegate == null)) {
                this.onEndGetExecutablesDelegate = new EndOperationDelegate(this.OnEndGetExecutables);
            }
            if ((this.onGetExecutablesCompletedDelegate == null)) {
                this.onGetExecutablesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExecutablesCompleted);
            }
            base.InvokeAsync(this.onBeginGetExecutablesDelegate, new object[] {
                        id}, this.onEndGetExecutablesDelegate, this.onGetExecutablesCompletedDelegate, userState);
        }
        
        public Server.ReadModel.Endpoint.CqrsServiceReference.DomainModelDto[] GetList() {
            return base.Channel.GetList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Server.ReadModel.Endpoint.CqrsServiceReference.DomainModelDto[] EndGetList(System.IAsyncResult result) {
            return base.Channel.EndGetList(result);
        }
        
        private System.IAsyncResult OnBeginGetList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetList(callback, asyncState);
        }
        
        private object[] OnEndGetList(System.IAsyncResult result) {
            Server.ReadModel.Endpoint.CqrsServiceReference.DomainModelDto[] retVal = this.EndGetList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetListCompleted(object state) {
            if ((this.GetListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetListCompleted(this, new GetListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetListAsync() {
            this.GetListAsync(null);
        }
        
        public void GetListAsync(object userState) {
            if ((this.onBeginGetListDelegate == null)) {
                this.onBeginGetListDelegate = new BeginOperationDelegate(this.OnBeginGetList);
            }
            if ((this.onEndGetListDelegate == null)) {
                this.onEndGetListDelegate = new EndOperationDelegate(this.OnEndGetList);
            }
            if ((this.onGetListCompletedDelegate == null)) {
                this.onGetListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetListCompleted);
            }
            base.InvokeAsync(this.onBeginGetListDelegate, null, this.onEndGetListDelegate, this.onGetListCompletedDelegate, userState);
        }
        
        public Server.ReadModel.Endpoint.CqrsServiceReference.DomainModelDto[] GetPublishedList() {
            return base.Channel.GetPublishedList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPublishedList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPublishedList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Server.ReadModel.Endpoint.CqrsServiceReference.DomainModelDto[] EndGetPublishedList(System.IAsyncResult result) {
            return base.Channel.EndGetPublishedList(result);
        }
        
        private System.IAsyncResult OnBeginGetPublishedList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetPublishedList(callback, asyncState);
        }
        
        private object[] OnEndGetPublishedList(System.IAsyncResult result) {
            Server.ReadModel.Endpoint.CqrsServiceReference.DomainModelDto[] retVal = this.EndGetPublishedList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPublishedListCompleted(object state) {
            if ((this.GetPublishedListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPublishedListCompleted(this, new GetPublishedListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPublishedListAsync() {
            this.GetPublishedListAsync(null);
        }
        
        public void GetPublishedListAsync(object userState) {
            if ((this.onBeginGetPublishedListDelegate == null)) {
                this.onBeginGetPublishedListDelegate = new BeginOperationDelegate(this.OnBeginGetPublishedList);
            }
            if ((this.onEndGetPublishedListDelegate == null)) {
                this.onEndGetPublishedListDelegate = new EndOperationDelegate(this.OnEndGetPublishedList);
            }
            if ((this.onGetPublishedListCompletedDelegate == null)) {
                this.onGetPublishedListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPublishedListCompleted);
            }
            base.InvokeAsync(this.onBeginGetPublishedListDelegate, null, this.onEndGetPublishedListDelegate, this.onGetPublishedListCompletedDelegate, userState);
        }
        
        public void ReloadFromEvents(System.Uri uri, System.DateTime lastEvent) {
            base.Channel.ReloadFromEvents(uri, lastEvent);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReloadFromEvents(System.Uri uri, System.DateTime lastEvent, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReloadFromEvents(uri, lastEvent, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReloadFromEvents(System.IAsyncResult result) {
            base.Channel.EndReloadFromEvents(result);
        }
        
        private System.IAsyncResult OnBeginReloadFromEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Uri uri = ((System.Uri)(inValues[0]));
            System.DateTime lastEvent = ((System.DateTime)(inValues[1]));
            return this.BeginReloadFromEvents(uri, lastEvent, callback, asyncState);
        }
        
        private object[] OnEndReloadFromEvents(System.IAsyncResult result) {
            this.EndReloadFromEvents(result);
            return null;
        }
        
        private void OnReloadFromEventsCompleted(object state) {
            if ((this.ReloadFromEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReloadFromEventsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReloadFromEventsAsync(System.Uri uri, System.DateTime lastEvent) {
            this.ReloadFromEventsAsync(uri, lastEvent, null);
        }
        
        public void ReloadFromEventsAsync(System.Uri uri, System.DateTime lastEvent, object userState) {
            if ((this.onBeginReloadFromEventsDelegate == null)) {
                this.onBeginReloadFromEventsDelegate = new BeginOperationDelegate(this.OnBeginReloadFromEvents);
            }
            if ((this.onEndReloadFromEventsDelegate == null)) {
                this.onEndReloadFromEventsDelegate = new EndOperationDelegate(this.OnEndReloadFromEvents);
            }
            if ((this.onReloadFromEventsCompletedDelegate == null)) {
                this.onReloadFromEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReloadFromEventsCompleted);
            }
            base.InvokeAsync(this.onBeginReloadFromEventsDelegate, new object[] {
                        uri,
                        lastEvent}, this.onEndReloadFromEventsDelegate, this.onReloadFromEventsCompletedDelegate, userState);
        }
        
        public Server.ReadModel.Endpoint.CqrsServiceReference.Pong Ping(System.Uri sender) {
            return base.Channel.Ping(sender);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPing(System.Uri sender, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPing(sender, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Server.ReadModel.Endpoint.CqrsServiceReference.Pong EndPing(System.IAsyncResult result) {
            return base.Channel.EndPing(result);
        }
        
        private System.IAsyncResult OnBeginPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Uri sender = ((System.Uri)(inValues[0]));
            return this.BeginPing(sender, callback, asyncState);
        }
        
        private object[] OnEndPing(System.IAsyncResult result) {
            Server.ReadModel.Endpoint.CqrsServiceReference.Pong retVal = this.EndPing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPingCompleted(object state) {
            if ((this.PingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingCompleted(this, new PingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingAsync(System.Uri sender) {
            this.PingAsync(sender, null);
        }
        
        public void PingAsync(System.Uri sender, object userState) {
            if ((this.onBeginPingDelegate == null)) {
                this.onBeginPingDelegate = new BeginOperationDelegate(this.OnBeginPing);
            }
            if ((this.onEndPingDelegate == null)) {
                this.onEndPingDelegate = new EndOperationDelegate(this.OnEndPing);
            }
            if ((this.onPingCompletedDelegate == null)) {
                this.onPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            base.InvokeAsync(this.onBeginPingDelegate, new object[] {
                        sender}, this.onEndPingDelegate, this.onPingCompletedDelegate, userState);
        }
    }
}
